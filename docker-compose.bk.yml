version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      # Database
      DATABASE_URL: mysql://willy:willy@db:3306/agridrone
      
      # NextAuth
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      
      # Roboflow
      ROBOFLOW_API_KEY: ${ROBOFLOW_API_KEY}
      ROBOFLOW_WORKSPACE: ${ROBOFLOW_WORKSPACE}
      
      # AWS (for production)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-ap-southeast-2}
      S3_BUCKET: ${S3_BUCKET}
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # Mapbox
      NEXT_PUBLIC_MAPBOX_TOKEN: ${NEXT_PUBLIC_MAPBOX_TOKEN}
      
      # Auth mode
      NEXT_PUBLIC_AUTH_MODE: ${NEXT_PUBLIC_AUTH_MODE:-disabled}
      
    volumes:
      # Persist uploads in development
      - ./public/uploads:/app/public/uploads
      # Persist SQLite database (if using in dev)
      - ./prisma/dev.db:/app/prisma/dev.db
    depends_on:
      - db
      - redis
    networks:
      - agridrone-network
    restart: unless-stopped

  # Mysql database (for production)
   db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: agridrone
      MYSQL_USER: willy
      MYSQL_PASSWORD: willy
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - agridrone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "willy", "-pwilly"]
      interval: 10s
      timeout: 5s
      retries: 5


  # Redis for BullMQ job processing
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - agridrone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - agridrone-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  agridrone-network:
    driver: bridge