generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://willy:willy@127.0.0.1:3306/agrodrone"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  teamMembers   TeamMember[]
  createdAssets Asset[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  members     TeamMember[]
  projects    Project[]
}

model TeamMember {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  teamId      String
  
  // Enhanced fields for location-based grouping
  location    String?  // Farm/property name
  purpose     ProjectPurpose @default(WEED_DETECTION)
  season      String?  // e.g., "2024 Spring", "Winter Survey"
  
  // Geographic center for map filtering
  centerLat   Float?
  centerLon   Float?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  assets      Asset[]
  jobs        ProcessingJob[]
  orthomosaics Orthomosaic[]
  
  @@index([teamId])
  @@index([location])
  @@index([purpose, season])
}

enum ProjectPurpose {
  WEED_DETECTION
  CROP_HEALTH
  SOIL_ANALYSIS
  INFRASTRUCTURE
  LIVESTOCK
  ENVIRONMENTAL
}

model Asset {
  id              String   @id @default(cuid())
  projectId       String
  fileName        String
  fileSize        Int
  mimeType        String
  storageUrl      String
  thumbnailUrl    String?
  
  // Flight session grouping
  flightSession   String?  // e.g., "Flight 1 - Section A", "Morning Survey"
  flightDate      DateTime?
  
  // Metadata from EXIF
  metadata        Json?
  gpsLatitude     Float?
  gpsLongitude    Float?
  altitude        Float?
  gimbalRoll      Float?
  gimbalPitch     Float?
  gimbalYaw       Float?
  cameraFov       Float?
  imageWidth      Int?
  imageHeight     Int?
  lrfDistance     Float?
  lrfTargetLat    Float?
  lrfTargetLon    Float?
  
  createdAt       DateTime @default(now())
  createdById     String
  
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy       User     @relation(fields: [createdById], references: [id])
  detections      Detection[]
  processingJobs  ProcessingJob[]
  annotationSessions AnnotationSession[]
  
  @@index([projectId])
  @@index([flightSession])
  @@index([gpsLatitude, gpsLongitude])
}

model ProcessingJob {
  id          String       @id @default(cuid())
  projectId   String
  type        JobType
  status      JobStatus    @default(PENDING)
  config      Json?        // Job-specific configuration (e.g., Roboflow model ID)
  progress    Int          @default(0)
  errorMessage String?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assets      Asset[]
  detections  Detection[]
  
  @@index([projectId, status])
}

enum JobType {
  AI_DETECTION
  MANUAL_ANNOTATION
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

model Detection {
  id              String         @id @default(cuid())
  jobId           String
  assetId         String
  type            DetectionType
  className       String
  confidence      Float?
  
  // Pixel coordinates
  boundingBox     Json           // {x, y, width, height} or polygon points
  
  // Geographic coordinates
  geoCoordinates  Json           // GeoJSON format
  centerLat       Float?
  centerLon       Float?
  
  // Additional data
  metadata        Json?          // Any additional data (e.g., chemical recommendations)
  verified        Boolean        @default(false)
  
  createdAt       DateTime       @default(now())
  
  job             ProcessingJob  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  asset           Asset          @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  @@index([jobId])
  @@index([assetId])
  @@index([centerLat, centerLon])
}

enum DetectionType {
  AI
  MANUAL
}

model ChemicalRecommendation {
  id          String   @id @default(cuid())
  species     String   @unique
  chemical    String
  dosagePerHa Float
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AnnotationSession {
  id            String               @id @default(cuid())
  assetId       String
  userId        String?              // Optional - for when auth is enabled
  status        AnnotationStatus     @default(IN_PROGRESS)
  createdAt     DateTime             @default(now())
  completedAt   DateTime?
  updatedAt     DateTime             @updatedAt
  
  asset         Asset                @relation(fields: [assetId], references: [id], onDelete: Cascade)
  annotations   ManualAnnotation[]
  
  @@index([assetId])
  @@index([status])
}

model ManualAnnotation {
  id              String           @id @default(cuid())
  sessionId       String
  weedType        String           // e.g., "Unknown Weed #1", "Suspected Lantana"
  confidence      ConfidenceLevel  @default(LIKELY)
  
  // Pixel coordinates (polygon vertices)
  coordinates     Json             // [[x1,y1], [x2,y2], ...] in pixels
  
  // Geographic coordinates (converted from pixels)
  geoCoordinates  Json?            // GeoJSON polygon format
  centerLat       Float?           // Center point for map display
  centerLon       Float?
  
  // Additional metadata
  notes           String?
  verified        Boolean          @default(false)
  verifiedBy      String?          // User who verified
  verifiedAt      DateTime?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  session         AnnotationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId])
  @@index([weedType])
  @@index([centerLat, centerLon])
}

enum AnnotationStatus {
  IN_PROGRESS
  COMPLETED
  REVIEWED
  ARCHIVED
}

enum ConfidenceLevel {
  CERTAIN
  LIKELY
  UNCERTAIN
}

model Orthomosaic {
  id            String           @id @default(cuid())
  projectId     String
  name          String
  description   String?
  
  // File information
  originalFile  String           // S3/local path to GeoTIFF
  tilesetPath   String?          // Path to processed tiles
  fileSize      BigInt
  
  // Georeferencing
  bounds        Json             // GeoJSON bounds
  centerLat     Float
  centerLon     Float
  minZoom       Int              @default(10)
  maxZoom       Int              @default(22)
  
  // Metadata
  captureDate   DateTime?
  resolution    Float?           // cm/pixel
  area          Float?           // hectares
  imageCount    Int?             // number of source images
  
  // Processing status
  status        ProcessingStatus @default(PENDING)
  processingLog Json?
  
  // Relations
  project       Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@index([projectId])
  @@index([status])
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}